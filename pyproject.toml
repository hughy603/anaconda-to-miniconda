[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "conda-forge-converter"
dynamic = ["version"] # Version is dynamically determined from _version.py
description = "Convert Anaconda environments to conda-forge with the same top-level dependency versions"
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [{ name = "Your Name", email = "your.email@example.com" }]
maintainers = [{ name = "Your Name", email = "your.email@example.com" }]
keywords = [
    "conda",
    "conda-forge",
    "anaconda",
    "environment",
    "virtual environment",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "pyyaml>=6.0.1",
    "typing_extensions>=4.10.0", # For additional type hints if needed
]

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "pyright>=1.1.350",
    "python-semantic-release>=9.0.0",
    "pre-commit>=3.5.0",
    "build>=1.0.0",
    "hatch>=1.9.0",
]
test = ["pytest>=8.0.0", "pytest-cov>=4.1.0"]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings>=0.24.0",
    "mkdocstrings-python>=1.8.0",
    "mkdocs-minify-plugin>=0.7.0",
    "mkdocs-redirects>=1.2.1",
    "hatch>=1.9.0",
]
all = ["conda-forge-converter[dev,test,docs]"]

[project.scripts]
conda-forge-converter = "conda_forge_converter.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/conda-forge-converter"
Documentation = "https://github.com/yourusername/conda-forge-converter#readme"
Issues = "https://github.com/yourusername/conda-forge-converter/issues"
Source = "https://github.com/yourusername/conda-forge-converter"

# Configure dynamic version management - using python-semantic-release
[tool.hatch.version]
source = "regex"
regex = "__version__ = '(?P<version>[^']+)'"
path = "src/conda_forge_converter/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/conda_forge_converter"]

# Environment management is now handled by UV
[tool.hatch.envs.default.scripts]
bump-version = "semantic-release version --no-commit --no-tag --no-push --no-vcs-release"
prepare-release = "semantic-release version --print"
check-next-version = "semantic-release version --print"

# Test scripts
test = "pytest --cov=conda_forge_converter --cov-report=term-missing --cov-report=xml tests/"
test-fast = "pytest --cov=conda_forge_converter --cov-report=term-missing --cov-fail-under=0 tests/test_cli.py"
test-specific = "pytest --cov=conda_forge_converter --cov-report=term-missing --cov-fail-under=0"
clean-coverage = "rm -f .coverage .coverage.* coverage.xml && rm -rf htmlcov"

# Linting and type checking
lint = "ruff check ."
type-check = "pyright"

# Documentation scripts
docs-build = "mkdocs build"
docs-serve = "mkdocs serve"

# Type checking configuration is now in pyrightconfig.json

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = ["E", "F", "B", "I", "N", "UP", "PT", "RUF", "C90", "D", "ANN"]
ignore = ["D203", "D213"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = false
mypy-init-return = true
suppress-none-returning = true
suppress-dummy-args = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"tests/*" = ["E501", "ANN", "PT009", "D"]
"scripts/*" = ["E501", "ANN201", "D"]
# Ignore missing return type annotations in decorator wrappers
"src/conda_forge_converter/progress.py" = ["ANN401"]
"src/conda_forge_converter/cli.py" = ["E501"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "slow: marks tests as slow tests that may take longer to run",
]

# Python-Semantic-Release configuration
[tool.semantic_release]
version_variable = ["src/conda_forge_converter/_version.py:__version__"]
branch = "master"
upload_to_pypi = true
upload_to_release = true
build_command = "python -m build"
github_token = "GH_TOKEN"

# Branch-specific configuration
major_on_zero = false     # Don't treat 0.x versions specially
tag_format = "v{version}"

# Commit message parsing
commit_parser = "conventional"
commit_author = "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

# Changelog configuration
changelog_file = "CHANGELOG.md"
changelog_sections = [
    "feature",
    "fix",
    "breaking",
    "documentation",
    "performance",
    "refactor",
]
changelog_scope_section_order = [
    "core",
    "cli",
    "utils",
    "deps",
    "tests",
    "docs",
]

# Version management for development branches
[tool.semantic_release.branches.develop]
match = "develop"
prerelease = true
prerelease_token = "dev"

# Version management for feature branches
[tool.semantic_release.branches.feature]
match = "feature/*"
prerelease = true
prerelease_token = "feature"

# UV configuration for dependency management
[tool.uv]
# UV will automatically use requirements.lock for reproducible installations

# Coverage configuration
[tool.coverage.run]
source = ["conda_forge_converter"]
branch = false

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
fail_under = 50
show_missing = true
