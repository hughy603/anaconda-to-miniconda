[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "conda-forge-converter"
dynamic = ["version"]
description = "Convert Anaconda environments to conda-forge with the same top-level dependency versions"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["conda", "conda-forge", "anaconda", "environment", "virtual environment"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development",
    "Topic :: System :: Installation/Setup",
    "Topic :: System :: Systems Administration",
]

dependencies = [
    "pyyaml>=6.0",
    "typing_extensions>=4.7.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.3.0",
    "pyright>=1.1.350",
    "pre-commit>=3.6.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "types-PyYAML>=6.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "types-PyYAML>=6.0.0",
]

[project.scripts]
conda-forge-converter = "conda_forge_converter.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/conda-forge-converter"
Documentation = "https://github.com/yourusername/conda-forge-converter#readme"
Issues = "https://github.com/yourusername/conda-forge-converter/issues"
Source = "https://github.com/yourusername/conda-forge-converter"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/conda_forge_converter"]

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "D",   # pydocstyle
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
]

ignore = [
    "FBT001",  # Boolean-typed positional argument in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean positional value in function call
    "G004",    # Logging statement uses f-string
    "S603",    # subprocess call: check for execution of untrusted input
    "TRY300",  # Consider moving this statement to an else block
    "TRY400",  # Use logging.exception instead of logging.error
    "ARG002",  # Unused method argument
    "PLR0913", # Too many arguments in function definition
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "PTH103",  # os.makedirs() should be replaced by Path.mkdir(parents=True)
    "SIM108",  # Use ternary operator instead of if-else-block
    "SIM117",  # Use a single with statement with multiple contexts
    "C901",    # Function is too complex
    "E501",    # Line too long
    "D211",    # `one-blank-line-before-class
    "D213",    # multi-line-summary-second-line-empty
    "D100",    # Missing docstring in public module
    "D401",    # First line of docstring should be in imperative mood
    "BLE001",  # Do not catch blind exception: `Exception`
    "PGH003",  # Use specific rule codes when ignoring type issues
    "PGH004",  # Use specific rule codes when using `noqa`
    "SIM222",  # Use `True` instead of `... or True`
    "F811",    # Redefinition of unused name
    "T201",    # Print found
    "D104",    # Missing docstring in public package
    "COM812",  # Trailing comma missing
    "ISC001",  # Implicit string concatenation
    "D203",    # Docstring is too short
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"tests/*" = ["S101", "ANN", "T201"]

[tool.ruff.lint.isort]
known-first-party = ["conda_forge_converter"]
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.pyright]
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__"]
ignore = []
defineConstant = { DEBUG = true }
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportMissingImports = true
reportMissingTypeStubs = false
pythonVersion = "3.11"
pythonPlatform = "Linux"
executionEnvironments = [
    { root = "src", extraPaths = ["src"] },
    { root = "tests", extraPaths = ["src", "tests"] }
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
pythonpath = ["src"]
markers = [
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

[tool.pydocstyle]
convention = "google"
match = "(?!test_).*\\.py"
match-dir = "(?!\\.)(?!tests)(?!docs).*"
add-ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
    "D107",  # Missing docstring in __init__
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
]
add-select = [
    "D211",  # No blank lines allowed before class docstring
    "D214",  # Section is over-indented
    "D406",  # Section name should end with a newline
    "D407",  # Missing dashed underline after section
    "D408",  # Section underline should be in the line following the section's name
    "D409",  # Section underline should match the length of its name
    "D413",  # Missing blank line after last section
]

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "types-pathlib2>=2.3.0",
]
