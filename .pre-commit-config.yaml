# Pre-commit configuration
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
      - id: check-ast
      - id: check-json
      - id: check-merge-conflict
      - id: detect-private-key
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: check-case-conflict
      - id: check-toml

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.11.4
    hooks:
      - id: ruff
        args: [--fix, --config=pyproject.toml]
      - id: ruff-format
        types_or: [python, toml]

  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.399
    hooks:
      - id: pyright
        args: ["--project=./pyrightconfig.json"]

  # Commit message format validation
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.1.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args:
          [
            feat,
            fix,
            docs,
            style,
            refactor,
            perf,
            test,
            build,
            ci,
            chore,
            revert,
          ]

  # GitHub workflow validation
  - repo: https://github.com/rhysd/actionlint
    rev: v1.6.26
    hooks:
      - id: actionlint
        name: Validate GitHub Actions workflows
        files: ^\.github/workflows/.*\.ya?ml$

  # Dependency management and local hooks
  - repo: local
    hooks:
      # Dependency management
      - id: deps-lock
        name: Lock dependencies with UV
        entry: uv pip compile pyproject.toml --output-file=requirements.lock --extra=dev --extra=test
        language: system
        files: ^(pyproject\.toml|requirements\.lock)$
        pass_filenames: false

      - id: uv-lock
        name: Update UV lockfile
        entry: uv lock
        language: system
        files: ^(pyproject\.toml|uv\.lock)$
        pass_filenames: false

      # Python compatibility check
      - id: python-version-check
        name: Python 3.11/3.12 Compatibility Check
        entry: python .github/scripts/check_python_compatibility.py
        language: python
        pass_filenames: false
        stages: [pre-push, manual]
        verbose: true

      # GitHub Actions validation
      - id: check-composite-actions
        name: Validate composite actions
        entry: python .github/scripts/validate-composite-actions.py
        language: python
        additional_dependencies: [pyyaml]
        files: ^\.github/actions/.*/action\.ya?ml$
        pass_filenames: true

      - id: check-workflow-references
        name: Check workflow references
        entry: python .github/scripts/check-workflow-references.py
        language: python
        additional_dependencies: [pyyaml]
        files: ^\.github/workflows/.*\.ya?ml$
        pass_filenames: true

      # Shellcheck verification
      - id: check-shellcheck
        name: Check shellcheck installation
        entry: powershell -ExecutionPolicy Bypass -File .github/scripts/check-shellcheck-installed.ps1
        language: system
        pass_filenames: false
        always_run: true

      # Release validation
      - id: validate-release
        name: Validate release readiness
        entry: semantic-release version --print
        language: system
        pass_filenames: false
        stages: [pre-push, manual]

      - id: check-version-bump
        name: Check version bump
        entry: semantic-release version --no-commit --no-tag --no-push --no-vcs-release
        language: system
        pass_filenames: false
        stages: [manual]

  # Markdown formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.22
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black
          - mdformat-myst
