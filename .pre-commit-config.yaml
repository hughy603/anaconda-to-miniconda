# Pre-commit configuration
repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        exclude: ^bin/act$
      - id: check-ast
      - id: check-json
      - id: check-merge-conflict
      - id: detect-private-key
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: check-case-conflict
      - id: check-toml

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.11.4
    hooks:
      - id: ruff
        args: [--fix, --config=pyproject.toml]
        types_or: [python]
        stages: [pre-commit]
      - id: ruff-format
        types_or: [python, toml]
        stages: [pre-commit]

  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.399
    hooks:
      - id: pyright
        args: ["--project=./pyrightconfig.json"]
        stages: [pre-commit, pre-push]

  # Commit message format validation
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.1.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args:
          [
            feat,
            fix,
            docs,
            style,
            refactor,
            perf,
            test,
            build,
            ci,
            chore,
            revert,
          ]

  # GitHub workflow validation
  - repo: https://github.com/rhysd/actionlint
    rev: v1.6.26
    hooks:
      - id: actionlint
        name: Validate GitHub Actions workflows
        files: ^\.github/workflows/.*\.ya?ml$

  # Dependency management and local hooks
  - repo: local
    hooks:
      # Dependency management
      - id: deps-lock
        name: Lock dependencies with UV
        entry: uv pip compile pyproject.toml --output-file=requirements.lock --extra=dev --extra=test
        language: system
        files: ^(pyproject\.toml|requirements\.lock)$
        pass_filenames: false
        stages: [pre-commit]

      - id: uv-lock
        name: Update UV lockfile
        entry: uv pip compile pyproject.toml --output-file=requirements.lock --extra=dev --extra=test
        language: system
        files: ^(pyproject\.toml|uv\.lock)$
        pass_filenames: false
        stages: [pre-commit]

      # Run tests
      - id: pytest-check
        name: Run pytest
        entry: pytest -v -k "not slow and not integration"
        language: system
        types: [python]
        pass_filenames: false
        stages: [pre-commit]

      # GitHub Actions workflow validation

      # Validate changed workflows on commit (fast)
      - id: validate-changed-workflows
        name: Validate changed workflows
        entry: python validate-all-workflows.py --changed-only --dry-run
        language: system
        files: ^\.github/workflows/.*\.ya?ml$
        pass_filenames: false
        stages: [pre-commit]

      # Validate all workflows (manual, thorough)
      - id: validate-workflows-execution
        name: Validate all workflows by running locally
        entry: python validate-all-workflows.py
        language: system
        files: ^\.github/workflows/.*\.ya?ml$
        pass_filenames: false
        stages: [manual]

      # Validate workflows before push
      - id: validate-workflows-pre-push
        name: Validate workflows before push
        entry: python validate-all-workflows.py --changed-only
        language: system
        files: ^\.github/workflows/.*\.ya?ml$
        pass_filenames: false
        stages: [pre-push]

      # Release validation (manual only)
      - id: check-version-bump
        name: Check version bump
        entry: semantic-release version --no-commit --no-tag --no-push --no-vcs-release
        language: system
        pass_filenames: false
        stages: [manual]

      - id: powershell-script-analyzer
        name: PowerShell Script Analyzer
        entry: pwsh -NoProfile -ExecutionPolicy Bypass -Command "if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) { Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck }; $files = @(git ls-files '*.ps1'); if ($files.Count -gt 0) { $results = $files | ForEach-Object { Invoke-ScriptAnalyzer -Path $_ -Settings .vscode/PSScriptAnalyzerSettings.psd1 }; if ($results) { $results | Format-Table -AutoSize; exit 1 } else { exit 0 } } else { exit 0 }"
        language: system
        pass_filenames: false
        types: [powershell]

      - id: powershell-formatter
        name: PowerShell Formatter
        entry: pwsh -NoProfile -ExecutionPolicy Bypass -Command "if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) { Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser -SkipPublisherCheck }; $files = @(git ls-files '*.ps1'); if ($files.Count -gt 0) { foreach ($file in $files) { $content = Get-Content -Path $file -Raw; $formatted = Invoke-Formatter -ScriptDefinition $content -Settings .vscode/PSScriptAnalyzerSettings.psd1; if ($formatted -ne $content) { Set-Content -Path $file -Value $formatted -NoNewline -Encoding UTF8; Write-Output \"Formatted $file\" } } }"
        language: system
        pass_filenames: false
        types: [powershell]

      - id: powershell-encoding-fixer
        name: PowerShell Encoding Fixer
        entry: pwsh -NoProfile -ExecutionPolicy Bypass -Command "$files = @(git ls-files '*.ps1'); if ($files.Count -gt 0) { foreach ($file in $files) { $content = Get-Content -Path $file -Raw; $utf8BomEncoding = New-Object System.Text.UTF8Encoding $true; [System.IO.File]::WriteAllText($file, $content, $utf8BomEncoding); Write-Output \"Fixed encoding for $file\" } }"
        language: system
        pass_filenames: false
        types: [powershell]

  # Markdown formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.22
    hooks:
      - id: mdformat
        additional_dependencies:
          - mdformat-gfm
          - mdformat-black
          - mdformat-myst

  # Shell script validation
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        name: Validate shell scripts
        description: Checks shell scripts for syntax errors and potential issues
        types: [shell]
        args: ["--severity=warning", "--enable=all", "--shell=bash"]
