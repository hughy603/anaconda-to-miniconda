name: "Diagnostic Information"
description: "Collects and displays diagnostic information about the environment"
inputs:
  verbose:
    description: "Whether to show verbose output"
    required: false
    default: "false"
  include-env:
    description: "Whether to include environment variables"
    required: false
    default: "true"
  include-system:
    description: "Whether to include system information"
    required: false
    default: "true"
  include-python:
    description: "Whether to include Python information"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Collect diagnostic information
      shell: bash
      run: |
        echo "=== Diagnostic Information ==="
        echo "Date: $(date)"
        echo "GitHub Actions Runner: $RUNNER_NAME"

        if [[ "${{ inputs.include-system }}" == "true" ]]; then
          echo ""
          echo "=== System Information ==="
          echo "OS: $(uname -s)"
          echo "Kernel: $(uname -r)"
          echo "Architecture: $(uname -m)"
          echo "Hostname: $(hostname)"

          if [[ "$(uname -s)" == "Linux" ]]; then
            echo "Distribution: $(cat /etc/os-release | grep PRETTY_NAME | cut -d= -f2 | tr -d '"')"
            echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
            echo "CPU: $(grep "model name" /proc/cpuinfo | head -1 | cut -d: -f2 | xargs)"
            echo "CPU Cores: $(grep -c processor /proc/cpuinfo)"
          elif [[ "$(uname -s)" == "Darwin" ]]; then
            echo "macOS Version: $(sw_vers -productVersion)"
            echo "Memory: $(sysctl hw.memsize | awk '{print $2/1024/1024/1024 " GB"}')"
            echo "CPU: $(sysctl -n machdep.cpu.brand_string)"
            echo "CPU Cores: $(sysctl -n hw.ncpu)"
          fi

          echo "Disk Space:"
          df -h | grep -v "tmpfs" | grep -v "udev"
        fi

        if [[ "${{ inputs.include-python }}" == "true" ]]; then
          echo ""
          echo "=== Python Information ==="
          echo "Python Version: $(python --version 2>&1)"
          echo "Python Path: $(which python)"
          echo "Pip Version: $(pip --version 2>&1)"

          if command -v uv &> /dev/null; then
            echo "UV Version: $(uv --version 2>&1)"
          else
            echo "UV: Not installed"
          fi

          if command -v hatch &> /dev/null; then
            echo "Hatch Version: $(hatch --version 2>&1)"
          else
            echo "Hatch: Not installed"
          fi

          if [[ "${{ inputs.verbose }}" == "true" ]]; then
            echo ""
            echo "Installed Python Packages:"
            pip list
          fi
        fi

        if [[ "${{ inputs.include-env }}" == "true" ]]; then
          echo ""
          echo "=== Environment Variables ==="
          # Filter out sensitive environment variables
          env | grep -v "TOKEN\|SECRET\|PASSWORD\|KEY" | sort
        fi

        echo ""
        echo "=== GitHub Context ==="
        echo "Repository: $GITHUB_REPOSITORY"
        echo "Ref: $GITHUB_REF"
        echo "SHA: $GITHUB_SHA"
        echo "Workflow: $GITHUB_WORKFLOW"
        echo "Event Name: $GITHUB_EVENT_NAME"
        echo "Actor: $GITHUB_ACTOR"

        echo ""
        echo "=== Network Information ==="
        echo "DNS Resolution:"
        nslookup github.com || echo "nslookup not available"

        echo ""
        echo "Internet Connectivity:"
        curl -s -o /dev/null -w "GitHub.com: HTTP Status %{http_code}, Connect time: %{time_connect}s, Total time: %{time_total}s\n" https://github.com || echo "curl not available"
