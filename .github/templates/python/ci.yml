name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.7.1"
  ACT_LOCAL_TESTING: ${{ vars.ACT_LOCAL_TESTING || 'false' }}

jobs:
  quick-tests:
    name: Quick Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Diagnostic information
        uses: ./.github/actions/diagnostic-info
        with:
          verbose: ${{ github.event.inputs.debug || false }}
          include-env: ${{ github.event.inputs.debug || false }}

      - name: Setup Python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-extras: "dev,test"

      - name: Run linting
        uses: ./.github/actions/run-linting
        with:
          lint-tool: "ruff"
          type-check: true
          format-check: true
          auto-fix: false
          fail-on-error: true

      - name: Run critical tests
        uses: ./.github/actions/run-tests
        with:
          test-type: "unit"
          coverage: false
          fail-fast: true
          parallel: true
          markers: "critical"
          debug: ${{ github.event.inputs.debug || false }}

  full-tests:
    name: Full Tests
    needs: quick-tests
    if: success()
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ${{ env.ACT_LOCAL_TESTING == 'true' && fromJSON('["3.11"]') || fromJSON('["3.11", "3.12"]') }}
        os: ${{ env.ACT_LOCAL_TESTING == 'true' && fromJSON('["ubuntu-latest"]') || fromJSON('["ubuntu-latest", "windows-latest", "macos-latest"]') }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Diagnostic information
        uses: ./.github/actions/diagnostic-info
        with:
          verbose: ${{ github.event.inputs.debug || false }}
          include-env: false

      - name: Setup Python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ matrix.python-version }}
          install-extras: "dev,test"

      - name: Run tests
        uses: ./.github/actions/run-tests
        with:
          test-type: "all"
          coverage: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION }}
          fail-fast: false
          parallel: true
          debug: ${{ github.event.inputs.debug || false }}

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION && env.ACT_LOCAL_TESTING != 'true'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  integration-tests:
    name: Integration Tests
    needs: full-tests
    if: success() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-extras: "dev,test"

      - name: Run integration tests
        uses: ./.github/actions/run-tests
        with:
          test-type: "integration"
          coverage: false
          fail-fast: false
          parallel: false
          debug: ${{ github.event.inputs.debug || false }}

  security:
    name: Security Checks
    needs: quick-tests
    if: success() && env.ACT_LOCAL_TESTING != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: ./.github/actions/setup-python-env
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          install-extras: "dev"

      - name: Install security tools
        run: |
          uv pip install bandit safety --system

      - name: Run security checks
        run: |
          echo "Running security checks..."
          bandit -r src/ -c pyproject.toml || echo "::warning::Bandit found security issues"
          safety check || echo "::warning::Safety found security issues"

  summary:
    name: Build Summary
    if: always()
    needs: [quick-tests, full-tests, integration-tests, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build summary
        run: |
          echo "## CI Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Quick Tests
          if [[ "${{ needs.quick-tests.result }}" == "success" ]]; then
            echo "✅ **Quick Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.quick-tests.result }}" == "failure" ]]; then
            echo "❌ **Quick Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Quick Tests:** Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
          fi

          # Full Tests
          if [[ "${{ needs.full-tests.result }}" == "success" ]]; then
            echo "✅ **Full Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.full-tests.result }}" == "failure" ]]; then
            echo "❌ **Full Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Full Tests:** Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
          fi

          # Integration Tests
          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "✅ **Integration Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.integration-tests.result }}" == "failure" ]]; then
            echo "❌ **Integration Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Integration Tests:** Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
          fi

          # Security Checks
          if [[ "${{ needs.security.result }}" == "success" ]]; then
            echo "✅ **Security Checks:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.security.result }}" == "failure" ]]; then
            echo "❌ **Security Checks:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security Checks:** Skipped or Cancelled" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For detailed information, see the job logs." >> $GITHUB_STEP_SUMMARY
