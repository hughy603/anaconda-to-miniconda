name: Branch Protection (Local Testing)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - master

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  CACHE_KEY: ubuntu-pip-v1

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ env.CACHE_KEY }}

      - name: Install dependencies
        run: |
          uv pip install hatch --system  # Only needed for version management
          # Explicitly create hatch environment with test dependencies
          hatch env create
          # Explicitly install test dependencies
          hatch env run -- pip install pytest pytest-cov

      - name: Check version format
        run: |
          VERSION=$(hatch version)
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            exit 1
          fi

      - name: Check CHANGELOG.md
        if: github.event_name == 'pull_request'
        run: |
          if ! git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "CHANGELOG.md"; then
            echo "Error: CHANGELOG.md must be updated with version changes"
            exit 1
          fi

      - name: Run tests
        run: |
          hatch run pytest --cov=conda_forge_converter --cov-report=term-missing --cov-report=xml --junitxml=pytest.xml tests/

      - name: Run linting
        run: |
          hatch run lint
          hatch run type-check

      - name: Check commit message format
        if: github.event_name == 'pull_request'
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if ! [[ $COMMIT_MSG =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\([a-z0-9-]+\))?: .+ ]]; then
            echo "Error: Invalid commit message format. Must follow Conventional Commits specification."
            echo "Example: feat(api): add new endpoint"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .coverage
            coverage.xml
            pytest.xml
          retention-days: 30

  verify-protection:
    name: Verify Branch Protection
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify branch protection settings
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // Get the branch protection settings
              const branch = github.ref.replace('refs/heads/', '');
              console.log(`Checking branch protection for ${branch}`);

              const { data: protection } = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch
              });

              // Check required status checks
              if (!protection.required_status_checks) {
                core.warning(`⚠️ Branch ${branch} does not have required status checks enabled.`);
              }

              // Check required PR reviews
              if (!protection.required_pull_request_reviews) {
                core.warning(`⚠️ Branch ${branch} does not have required pull request reviews enabled.`);
              } else {
                const requiredReviewers = protection.required_pull_request_reviews.required_approving_review_count || 0;
                if (requiredReviewers < 1) {
                  core.warning(`⚠️ Branch ${branch} requires ${requiredReviewers} reviewers. Consider requiring at least 1 reviewer.`);
                }
              }

              // Check admin enforcement
              if (!protection.enforce_admins.enabled) {
                core.warning(`⚠️ Branch ${branch} does not enforce protections for administrators.`);
              }

              console.log('Branch protection verification completed.');
            } catch (error) {
              core.warning(`⚠️ Could not verify branch protection settings: ${error.message}`);
              core.warning('Please ensure branch protection is enabled in repository settings:');
              core.warning('Settings > Branches > Branch protection rules > Add rule');
              core.warning('Recommended settings:');
              core.warning('- Require pull request reviews before merging');
              core.warning('- Require status checks to pass before merging');
              core.warning('- Require branches to be up to date before merging');
              core.warning('- Include administrators');
            }
