name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

env:
  ACT_LOCAL_TESTING: ${{ vars.ACT_LOCAL_TESTING || 'true' }}
  PYTHON_VERSION: "3.11"
  UV_VERSION: "0.6.14"
  COVERAGE_THRESHOLD: "50"
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install UV
        run: |
          python -m pip install --upgrade pip
          pip install uv==${{ env.UV_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-uv${{ env.UV_VERSION }}-${{ hashFiles('requirements.lock') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-uv${{ env.UV_VERSION }}-

      - name: Install dependencies
        run: |
          uv pip install -e ".[dev,test]" --system

      - name: Run linting and type checking
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        continue-on-error: true
        run: |
          hatch run lint || echo "::warning::Linting failed"
          hatch run format -- --check || echo "::warning::Formatting check failed"
          hatch run type-check || echo "::warning::Type checking failed"

      - name: Run tests with coverage
        id: run-tests
        continue-on-error: true
        run: |
          hatch run test --cov=github_actions_validator --cov-report=xml --cov-report=term-missing --cov-fail-under=${{ env.COVERAGE_THRESHOLD }} || echo "::warning::Tests failed"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            .coverage
            coverage.xml
            test-results.xml
          retention-days: 90

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && env.ACT_LOCAL_TESTING != 'true'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ env.CODECOV_TOKEN }}

      - name: Run security checks
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        continue-on-error: true
        run: |
          hatch run security || echo "::warning::Security checks failed"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `CI failed for ${{ matrix.os }} with Python ${{ matrix.python-version }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
