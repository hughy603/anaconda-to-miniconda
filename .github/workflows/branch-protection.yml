name: Branch Protection

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - master

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  CACHE_KEY: ubuntu-pip-v1

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/uv
          key: ${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ env.CACHE_KEY }}

      - name: Install dependencies
        run: |
          uv pip install hatch  # Only needed for version management
          uv pip install -e ".[dev]"

      - name: Check version format
        run: |
          VERSION=$(hatch version)
          if ! [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            exit 1
          fi

      - name: Check CHANGELOG.md
        if: github.event_name == 'pull_request'
        run: |
          if ! git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q "CHANGELOG.md"; then
            echo "Error: CHANGELOG.md must be updated with version changes"
            exit 1
          fi

      - name: Run tests
        run: |
          uvx pytest --cov=conda_forge_converter --cov-report=term-missing --cov-report=xml --junitxml=pytest.xml

      - name: Run linting
        run: |
          uvx ruff check .
          uvx mypy .

      - name: Check commit message format
        if: github.event_name == 'pull_request'
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if ! [[ $COMMIT_MSG =~ ^(feat|fix|docs|style|refactor|test|chore)(\([a-z0-9-]+\))?: .+ ]]; then
            echo "Error: Invalid commit message format. Must follow Conventional Commits specification."
            echo "Example: feat(api): add new endpoint"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            .coverage
            coverage.xml
            pytest.xml
          retention-days: 30
