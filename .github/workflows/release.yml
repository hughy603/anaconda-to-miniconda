name: Release

on:
  workflow_dispatch:
    inputs:
      force_level:
        description: 'Force specific version bump (optional)'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      require_approval:
        description: 'Require manual approval before release'
        required: true
        default: true
        type: boolean

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: "0.7.1"
  ACT_LOCAL_TESTING: ${{ vars.ACT_LOCAL_TESTING || 'false' }}
  RELEASE_VERSION: ${{ github.ref_name }}

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install UV
        run: |
          python -m pip install --upgrade pip
          pip install uv==${{ env.UV_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
          key: ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-uv${{ env.UV_VERSION }}-release-${{ hashFiles('requirements.lock') }}
          restore-keys: |
            ${{ runner.os }}-py${{ env.PYTHON_VERSION }}-uv${{ env.UV_VERSION }}-release-

      - name: Install dependencies
        run: |
          uv pip install -r requirements.lock --system
          uv pip install hatch --system

      - name: Validate release readiness
        id: validate
        continue-on-error: true
        run: |
          hatch run validate-release || echo "::warning::Release validation failed"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `Release validation failed for ${{ env.RELEASE_VERSION }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  test:
    name: Test on Multiple Platforms
    needs: [validate]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install UV
        run: |
          python -m pip install --upgrade pip
          pip install uv==${{ env.UV_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.cache/pip
          key: ${{ runner.os }}-py${{ matrix.python-version }}-uv${{ env.UV_VERSION }}-${{ hashFiles('requirements.lock') }}
          restore-keys: |
            ${{ runner.os }}-py${{ matrix.python-version }}-uv${{ env.UV_VERSION }}-

      - name: Install dependencies
        run: |
          uv pip install -r requirements.lock --system
          uv pip install hatch --system

      - name: Run tests
        id: run-tests
        continue-on-error: true
        run: |
          hatch run test || echo "::warning::Tests failed"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            .coverage
            coverage.xml
          retention-days: 30

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `Tests failed for ${{ env.RELEASE_VERSION }} on ${{ matrix.os }} with Python ${{ matrix.python-version }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  approve-release:
    name: Approve Release
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/releases
    if: ${{ github.event.inputs.require_approval == 'true' }}
    steps:
      - name: Wait for approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Release Approval Required"
          issue-body: |
            A new release is ready to be deployed.

            **Release Details:**
            - Version: ${{ env.RELEASE_VERSION }}
            - Triggered by: ${{ github.actor }}
            - Force Level: ${{ github.event.inputs.force_level }}

            Please review the test results and approve this release if everything looks good.

            To approve, comment with `/approve` on this issue.
            To reject, comment with `/reject` on this issue.

      - name: Notify approval
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `Release approved by ${{ github.actor }} at $(date)`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  release:
    name: Create Release
    needs: [approve-release]
    if: ${{ github.event.inputs.require_approval == 'true' || always() }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      id-token: write
      packages: write
    outputs:
      version: ${{ steps.publish.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install UV
        run: |
          python -m pip install --upgrade pip
          pip install uv==${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv pip install -r requirements.lock --system
          uv pip install python-semantic-release build twine hatch --system

      - name: Semantic Release (Production)
        id: release
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.force_level }}" != "auto" ]; then
            if [ "${{ github.event.inputs.force_level }}" == "major" ]; then
              semantic-release version --major --no-commit --no-tag --no-push --no-vcs-release
            elif [ "${{ github.event.inputs.force_level }}" == "minor" ]; then
              semantic-release version --minor --no-commit --no-tag --no-push --no-vcs-release
            elif [ "${{ github.event.inputs.force_level }}" == "patch" ]; then
              semantic-release version --patch --no-commit --no-tag --no-push --no-vcs-release
            fi
          else
            semantic-release version --no-commit --no-tag --no-push --no-vcs-release
          fi
          # Extract version from _version.py
          VERSION=$(python -c "from conda_forge_converter import __version__; print(__version__)")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Mock Semantic Release (Local Testing)
        id: release_mock
        if: ${{ env.ACT_LOCAL_TESTING == 'true' }}
        run: |
          echo "Mocking semantic release for local testing"
          echo "In production, this would determine the next version number"
          echo "version=0.0.0-local" >> "$GITHUB_OUTPUT"

      - name: Create Release (Production)
        uses: softprops/action-gh-release@v2
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        with:
          tag_name: v${{ steps.release.outputs.version }}
          name: Release v${{ steps.release.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Mock GitHub Release (Local Testing)
        if: ${{ env.ACT_LOCAL_TESTING == 'true' }}
        run: |
          echo "Mocking GitHub release creation for local testing"
          echo "In production, this would create a GitHub release with tag v0.0.0-local"
          echo "Release would include changelog and release notes"

      - name: Build and publish (Production)
        id: publish
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        run: |
          semantic-release publish
          # Extract version from _version.py again to ensure we have the latest
          VERSION=$(python -c "from conda_forge_converter import __version__; print(__version__)")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_URL: https://upload.pypi.org/legacy/
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Mock Build and Publish (Local Testing)
        id: publish_mock
        if: ${{ env.ACT_LOCAL_TESTING == 'true' }}
        run: |
          echo "Mocking package build and publish for local testing"
          echo "In production, this would build and publish the package to PyPI"
          python -m build
          echo "Package built successfully to dist/ directory"
          echo "version=0.0.0-local" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.egg-info/
          retention-days: 90

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `Release failed for ${{ env.RELEASE_VERSION }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  health-check:
    name: Deployment Health Check
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # This step is skipped in local testing mode
      - name: Install released package (Production)
        id: install
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        run: |
          pip install conda-forge-converter==${{ needs.release.outputs.version }} --no-cache-dir
          # Verify installation
          if conda-forge-converter --version | grep -q "${{ needs.release.outputs.version }}"; then
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      # This step only runs in local testing mode
      - name: Mock package installation (Local Testing)
        id: install_mock
        if: ${{ env.ACT_LOCAL_TESTING == 'true' }}
        run: |
          echo "Mocking package installation for local testing"
          echo "In production, this would install the package from PyPI"
          echo "status=success" >> "$GITHUB_OUTPUT"

      # This step is skipped in local testing mode
      - name: Basic functionality test (Production)
        id: test
        if: ${{ steps.install.outputs.status == 'success' && (!env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true') }}
        run: |
          # Run a basic test to ensure the package works
          conda-forge-converter --help
          # Add more comprehensive tests as needed
          echo "status=success" >> "$GITHUB_OUTPUT"

      # This step only runs in local testing mode
      - name: Mock functionality test (Local Testing)
        id: test_mock
        if: ${{ env.ACT_LOCAL_TESTING == 'true' }}
        run: |
          echo "Mocking package functionality test for local testing"
          echo "In production, this would verify the package works correctly"
          echo "status=success" >> "$GITHUB_OUTPUT"

  rollback:
    name: Rollback Release
    needs: [release, health-check]
    if: failure() && needs.release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install python-semantic-release twine

      - name: Get previous version
        id: prev_version
        run: |
          # Get the previous version tag
          PREV_VERSION=$(git describe --abbrev=0 --tags "$(git rev-list --tags --skip=1 --max-count=1)")
          echo "version=${PREV_VERSION#v}" >> "$GITHUB_OUTPUT"

      # This step is skipped in local testing mode
      - name: Create rollback PR (Production)
        uses: peter-evans/create-pull-request@v6
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: rollback to version ${{ steps.prev_version.outputs.version }} due to failed health check"
          title: "Emergency Rollback to ${{ steps.prev_version.outputs.version }}"
          body: |
            ## Emergency Rollback

            The release of version ${{ needs.release.outputs.version }} failed health checks.
            This PR rolls back to the previous stable version ${{ steps.prev_version.outputs.version }}.

            ### Failure Details

            - Release workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please investigate the cause of the failure before attempting another release.
          branch: rollback-${{ steps.prev_version.outputs.version }}
          base: master
          labels: rollback,emergency

      # This step only runs in local testing mode
      - name: Mock rollback PR (Local Testing)
        if: ${{ env.ACT_LOCAL_TESTING == 'true' }}
        run: |
          echo "Mocking rollback PR creation for local testing"
          echo "In production, this would create a PR to roll back to the previous version"
          echo "This would happen if the health check failed after release"
