name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      require_approval:
        description: 'Require manual approval before release'
        required: true
        default: true
        type: boolean

# Prevent concurrent runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  UV_VERSION: ${{ vars.UV_VERSION || '0.6.14' }}
  ACT_LOCAL_TESTING: ${{ vars.ACT_LOCAL_TESTING || 'false' }}

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.TEST_TIMEOUT_MINUTES && fromJSON(vars.TEST_TIMEOUT_MINUTES) || 30 }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          uv-version: ${{ env.UV_VERSION }}
          cache-key: release-validate
          extra-cache-paths: |
            dist/
            *.egg-info/

      - name: Create virtual environment
        run: |
          uv venv .venv
          source .venv/bin/activate

      - name: Install dependencies
        run: |
          uv pip install -r requirements-prod.lock
          uv pip install hatch python-semantic-release pre-commit

      - name: Run pre-commit checks
        run: |
          pre-commit run --all-files

      - name: Build package
        run: |
          uv pip install -e .
          python -m build
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.egg-info/
          retention-days: 30

      - name: Validate release readiness
        id: validate
        continue-on-error: true
        run: |
          # Check if build artifacts exist
          if [ ! -d "dist" ]; then
            echo "::error::Build artifacts not found in dist/"
            exit 1
          fi

          # Check if version file exists
          if [ ! -f "src/conda_forge_converter/_version.py" ]; then
            echo "::error::Version file not found"
            exit 1
          fi

          # Check if changelog exists
          if [ ! -f "CHANGELOG.md" ]; then
            echo "::error::CHANGELOG.md not found"
            exit 1
          fi

          # Get current version
          CURRENT_VERSION=$(python -c "from conda_forge_converter import __version__; print(__version__)")
          echo "current_version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"

          echo "::notice::Release validation passed"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const context = github.context;
            const message = `Release validation failed for ${{ steps.validate.outputs.current_version }}`;

            // Only create comment if we have an issue number
            if (context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } else {
              // If no issue number, create a new issue
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release Validation Failed - ${context.sha.substring(0, 7)}`,
                body: message
              });
            }

  test:
    name: Test on Multiple Platforms
    needs: [validate]
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ vars.TEST_TIMEOUT_MINUTES && fromJSON(vars.TEST_TIMEOUT_MINUTES) || 30 }}
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ matrix.python-version }}
          uv-version: ${{ env.UV_VERSION }}
          cache-key: release-test
          extra-cache-paths: |
            ~/.cache/hatch
            .coverage
            coverage.xml

      - name: Create virtual environment
        run: |
          uv venv .venv
          source .venv/bin/activate

      - name: Install dependencies
        run: |
          uv pip install -r uv.lock
          uv pip install hatch

      - name: Run tests
        id: run-tests
        run: |
          hatch run test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.os }}
          path: |
            .coverage
            coverage.xml
          retention-days: 30

      - name: Upload coverage to Codecov
        uses: ./.github/actions/mock-service
        with:
          service-name: Codecov
          mock-script: |
            echo "Coverage report available at coverage.xml"
            echo "In production, this would upload to Codecov"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const context = github.context;
            const message = `Tests failed for ${{ steps.run-tests.outputs.current_version }} on ${{ matrix.os }} with Python ${{ matrix.python-version }}`;

            // Only create comment if we have an issue number
            if (context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } else {
              // If no issue number, create a new issue
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Test Failure - ${context.sha.substring(0, 7)}`,
                body: message
              });
            }

  approve-release:
    name: Approve Release
    needs: [test]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.TEST_TIMEOUT_MINUTES && fromJSON(vars.TEST_TIMEOUT_MINUTES) || 30 }}
    environment:
      name: production
      url: ${{ github.server_url }}/${{ github.repository }}/releases
    if: ${{ github.event.inputs.require_approval == 'true' }}
    steps:
      - name: Wait for approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Release Approval Required"
          issue-body: |
            A new release is ready to be deployed.

            **Release Details:**
            - Version: ${{ env.RELEASE_VERSION }}
            - Triggered by: ${{ github.actor }}

            Please review the test results and approve this release if everything looks good.

            To approve, comment with `/approve` on this issue.
            To reject, comment with `/reject` on this issue.

      - name: Notify approval
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const message = `Release approved by ${{ github.actor }} at $(date)`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  release:
    name: Create Release
    needs: [approve-release]
    if: ${{ github.event.inputs.require_approval == 'true' || always() }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.RELEASE_TIMEOUT_MINUTES && fromJSON(vars.RELEASE_TIMEOUT_MINUTES) || 90 }}
    permissions:
      contents: write
      id-token: write
      packages: write
    outputs:
      version: ${{ steps.publish.outputs.version }}

    steps:
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          uv-version: ${{ env.UV_VERSION }}
          cache-key: release
          extra-cache-paths: |
            dist/
            *.egg-info/

      - name: Create virtual environment
        run: |
          uv venv .venv
          source .venv/bin/activate

      - name: Install dependencies
        run: |
          uv pip install -r uv.lock
          uv pip install python-semantic-release build twine hatch

      - name: Build package
        run: |
          uv pip install -e .
          python -m build

      - name: Semantic Release
        id: release
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release version --no-commit --no-tag --no-push --no-vcs-release
          VERSION=$(python -c "from conda_forge_converter import __version__; print(__version__)")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Generate changelog
        run: |
          semantic-release changelog --unreleased
          cat CHANGELOG.md

      - name: Create Release
        uses: ./.github/actions/mock-service
        with:
          service-name: GitHub Release
          mock-script: |
            echo "Creating GitHub release with tag v${{ steps.release.outputs.version }}"
            echo "Release would include changelog and release notes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and publish
        id: publish
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        run: |
          semantic-release publish
          VERSION=$(python -c "from conda_forge_converter import __version__; print(__version__)")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPOSITORY_URL: https://upload.pypi.org/legacy/
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.egg-info/
          retention-days: 90

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const context = github.context;
            const message = `Release failed for ${{ steps.release.outputs.version }}`;

            // Only create comment if we have an issue number
            if (context.issue.number) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            } else {
              // If no issue number, create a new issue
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release Failed - ${context.sha.substring(0, 7)}`,
                body: message
              });
            }

  health-check:
    name: Deployment Health Check
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          uv-version: ${{ env.UV_VERSION }}
          cache-key: health-check

      - name: Create virtual environment
        run: |
          uv venv .venv
          source .venv/bin/activate

      - name: Install released package (Production)
        id: install
        if: ${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}
        run: |
          uv pip install conda-forge-converter==${{ needs.release.outputs.version }} --no-cache-dir
          # Verify installation
          if conda-forge-converter --version | grep -q "${{ needs.release.outputs.version }}"; then
            echo "status=success" >> "$GITHUB_OUTPUT"
          else
            echo "status=failure" >> "$GITHUB_OUTPUT"
            exit 1
          fi

      - name: Run smoke tests
        if: steps.install.outputs.status == 'success'
        run: |
          conda-forge-converter --help
          # Add more comprehensive smoke tests as needed

  rollback:
    name: Rollback Release
    needs: [release, health-check]
    if: failure() && needs.release.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          uv-version: ${{ env.UV_VERSION }}
          cache-key: rollback

      - name: Create virtual environment
        run: |
          uv venv .venv
          source .venv/bin/activate

      - name: Install dependencies
        run: |
          uv pip install python-semantic-release twine

      - name: Get previous version
        id: prev_version
        run: |
          PREV_VERSION=$(git describe --abbrev=0 --tags "$(git rev-list --tags --skip=1 --max-count=1)")
          echo "version=${PREV_VERSION#v}" >> "$GITHUB_OUTPUT"

      - name: Create rollback PR
        uses: ./.github/actions/mock-service
        with:
          service-name: Rollback PR
          mock-script: |
            echo "Creating rollback PR to version ${{ steps.prev_version.outputs.version }}"
            echo "In production, this would create a PR to roll back to the previous version"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
