name: Documentation

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'docs/**'
      - '.github/workflows/docs.yml'
      - 'mkdocs.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'docs/**'
      - '.github/workflows/docs.yml'
      - 'mkdocs.yml'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  pull-requests: write

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  UV_VERSION: ${{ vars.UV_VERSION || '0.6.14' }}
  ACT_LOCAL_TESTING: ${{ vars.ACT_LOCAL_TESTING || 'false' }}
  DOCS_VERSION: ${{ github.ref_name }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.BUILD_TIMEOUT_MINUTES && fromJSON(vars.BUILD_TIMEOUT_MINUTES) || 60 }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          uv-version: ${{ env.UV_VERSION }}
          cache-key: docs
          extra-cache-paths: |
            .cache/mkdocs
            site/

      - name: Install dependencies
        run: |
          uv pip install -e ".[docs]" --system

      - name: Check spelling
        id: spelling
        continue-on-error: true
        run: |
          uv pip install codespell --system
          codespell --skip="*.pyc,*.git,*.png,*.jpg,*.jpeg,*.gif,*.svg,*.ico" --quiet-level=2 docs/ || echo "::warning::Spelling check failed"

      - name: Build MkDocs site
        id: build
        run: |
          hatch run docs-build -- --strict

      - name: Verify site directory exists
        run: |
          if [ ! -d "site" ]; then
            echo "::error::site directory not found after build"
            exit 1
          fi

      - name: Upload artifact
        uses: ./.github/actions/mock-service
        with:
          service-name: GitHub Pages
          mock-script: |
            echo "Documentation built successfully to ./site directory"
            ls -la ./site
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for broken links
        id: links
        continue-on-error: true
        run: |
          uv pip install linkchecker --system
          linkchecker --check-extern ./site/index.html || echo "::warning::Broken links found"

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `Documentation build failed for ${{ env.DOCS_VERSION }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });

  deploy:
    name: Deploy Documentation
    needs: build
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.TEST_TIMEOUT_MINUTES && fromJSON(vars.TEST_TIMEOUT_MINUTES) || 30 }}
    steps:
      - name: Deploy to GitHub Pages
        uses: ./.github/actions/mock-service
        with:
          service-name: GitHub Pages Deployment
          mock-script: |
            echo "Mocking GitHub Pages deployment for local testing"
            echo "In production, this would deploy the site to GitHub Pages"
            echo "Documentation is available locally in the ./site directory"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `Documentation deployment failed for ${{ env.DOCS_VERSION }}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
