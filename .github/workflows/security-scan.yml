name: Security Scanning

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  schedule:
    - cron: '0 0 * * 1'  # Run weekly on Monday

env:
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION || '3.11' }}
  UV_VERSION: ${{ vars.UV_VERSION || '0.6.14' }}
  ACT_LOCAL_TESTING: ${{ vars.ACT_LOCAL_TESTING || 'false' }}

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.TEST_TIMEOUT_MINUTES && fromJSON(vars.TEST_TIMEOUT_MINUTES) || 30 }}
    steps:
      - uses: ./.github/actions/setup-python
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          uv-version: ${{ env.UV_VERSION }}
          cache-key: security
          extra-cache-paths: |
            .coverage
            coverage.xml

      - name: Install dependencies
        run: |
          uv pip install -e ".[test]" --system
          uv pip install hatch --system

      - name: Run tests with coverage
        run: |
          hatch run test

      - name: SonarQube Scan
        uses: ./.github/actions/mock-service
        with:
          service-name: SonarQube
          mock-script: |
            echo "Mocking SonarQube scan for local testing"
            echo "In production, this would analyze code quality and security issues"
            echo "Coverage report generated at coverage.xml"
            echo "You can run local static analysis with: hatch run lint"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  secret-scanning:
    name: Secret Scanning Notification
    runs-on: ubuntu-latest
    timeout-minutes: ${{ vars.TEST_TIMEOUT_MINUTES && fromJSON(vars.TEST_TIMEOUT_MINUTES) || 30 }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Secret Scanning Notice
        run: |
          echo "::notice::GitHub's built-in secret scanning should be enabled in the repository settings."
          echo "::notice::Go to Settings > Security > Code security and analysis > Secret scanning > Enable"

          # Check if we're running in a PR context
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "::notice::Checking for potential secrets in this PR..."
            if [[ "${{ !env.ACT_LOCAL_TESTING || env.ACT_LOCAL_TESTING != 'true' }}" == "true" ]]; then
              git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | \
              grep -E '(password|token|key|secret|credential).*[=:][^=:]*[a-zA-Z0-9_-]{16,}' || true
            else
              echo "::notice::Mock secret scanning for local testing"
              echo "::notice::In production, this would scan for potential secrets in the PR diff"
            fi
          fi
